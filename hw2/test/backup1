#! /bin/sh
check()
{
dupcall="f"
if [ $# -eq 0 ]; then #if no arguments are passed in
	dir=`pwd`    
        cd $dir
        file=`ls`
	for i in $file
        do
              checkrest "$i"
        done
#duplicate 
elif [ $# -eq 1 ]; then	#if one arg passed in
	if [ -d "$1" ]; then
		temp=$1		
		valid="f"
#		input $temp
		given="t"
		properSyntax $temp
		if [ $valid == "t" ] ; then	
			dir=$1 
			cd $dir
			file=`ls`
			given="t"			
			duplicate
			for i in $file
			do
				checker=`echo $dir"/"$i | tr [A-Z] [a-z]`
				foundmatch="f"
				for value in $match
				do
#				echo THIS IS CHECK1 $checker
#				echo IT IS CHECKED AGAINS $dir"/"$value
				if [[ $checker == $dir"/"$value ]]; then
					foundmatch="t"
					break	
				fi
				done
				if [ $foundmatch == "f" ]; then 
					checkrest "$i"
				fi
			done
		#	duplicate
		else
			error "invalid input"
			exit 126 
		fi
	else
		error "invalid input" 
		exit 126
	fi		 
else
	error "invalid input"
	exit 126 	 
fi
}
duplicate()
{
dupcall="t"
match=""
matchtwo=""
#echo called this manyy times, and match is $match
	dirPath=$dir"/"$1
	if [ ${dir:0:1} == "." ]; then
        	dirPath="."
	fi 
#	result=`ls -1 $dirPath | tr [A-Z] [a-z] | sort | uniq -c | grep -v " 1 " | sed "s/ //g" | sed -e '0,/[0-9]/ s/[0-9]//'`
	result=`ls -1 $dirPath | tr [A-Z] [a-z] | sort | uniq -c | grep -v " 1 " | sed "s/^ *//g" | sed 's/^[0-9]* //'`
	#properSyntax $result
#	declare -a match
#	count=0
	if [ ${#result} -ne 0 ]; then
		for value in $result; do
		final=`echo $dirPath | sed 's/\/$//'`
	#	echo $final"/"$value
		dupcall="f"
		properSyntax $value
		if [ $valid == "t" ]; then 
			echo $final"/"$value
		fi
		done
	fi		
match=""
dupcall="f"
}

duplicateRec()
{
local new=""
for (( i=0; i<${#1}; i++ )); do
  if [ ${1:$i:1} != "/" ]; then
        new=$new${1:$i:1}
  else
        new=""
  fi
done
#echo IM being passed in $1
local result=`find -maxdepth 1 -iname $new`
occurances=`find -maxdepth 1 -iname $new | wc -w` 
dupcall="t"
properSyntax $1
if [ $valid == "t" ] && [ $occurances -gt  1 ]; then 
	echo $print
fi
dupcall="f"
}
checkrest()
{
if [ -f "$1" ] || [ -L "$1" ]; then
        properSyntax $1
        exceptions $1
	duplicateRec $1
        if [ $valid == "f" ] && [ fileEx == "t" ]; then
        echo $dir"/"$1
        fi
	elif [ -d "$1" ]; then
        properSyntax $1
        readRights $1
        if [ $valid == "t" ]; then
                for i in "$1"/*
                do
                        checkrest "$i"
			duplicateRec "$1"
                done
        fi
fi
}
                    
readRights()
{
if ! [[ -r $1 ]]; then   
	valid="f"  
	error "no read rights for $dir"/"$1"
        return
fi
}
properSyntax()
{
valid="f"
local new=""
for (( i=0; i<${#1}; i++ )); do
  if [ ${1:$i:1} != "/" ]; then
        new=$new${1:$i:1}
  else
        new=""
  fi
done
if [[ $new =~ [^A-Za-z_.\-] ]]; then
	if [[ $given == "t" ]]; then
	echo $1
	given="f"
	elif [[ $dupcall == "f" ]]; then
	echo $dir"/"$1
	fi
	return
elif [[ ${#new} -gt 14 ]]; then
	if [[ $given == "t" ]]; then
        echo $1
        given="f"
	elif [[ $dupcall == "f" ]]; then
        echo $dir"/"$1
        fi
	return
elif [[ $new =~ ^- ]]; then
	if [[ $given == "t" ]]; then
        echo $1
        given="f"
	elif [[ $dupcall == "f" ]]; then
        echo $dir"/"$1
        fi
	return
elif [[ $new == "." ]] || [[ $1 == ".." ]]; then 
	valid="t"
	return
elif [[ $new =~ ^\. ]]; then
	if [[ $given == "t" ]]; then
        echo $1
        given="f"
	elif [[ $dupcall == "f" ]]; then
        echo $dir"/"$1
        fi
	return
fi
valid="t"
}
exceptions()
{
fileEx="f"
if [[ $1 =~ [[A-Z][a-z]\.,-\s_\*] ]]; then
        fileEx="t"
elif [[ $1 =~ ^- ]]; then
        fileEx="t"
fi
}

input()	#this was originally used to parse the input, but cases where given is /-bin/cs will not be given
{
local new=""
start=1
if [ ${temp:0:1} != "/" ]; then
	start=0
fi
for (( i=start; i<${#temp}; i++ )); do
  if [ ${temp:$i:1} != "/" ]; then
	new=$new${temp:$i:1}
#  elif [[ $new =~ ^[^-][^/]*$ ]]; then #probably code here that calls propersyntax for new
#	valid="t"
#	new=""		
#  else 
#	valid="f"
#	break
  else 
	echo $i
	dupcall="f"
	properSyntax $new
	continue
	if [ $valid == "t" ]; then
		echo $new
		new=""
	else
		break
	fi
  fi
done
}
error()
{
  awk " BEGIN { print \"$@\" > \"/dev/fd/2\" }"
}
check "$@"

