#! /bin/sh
check()
{
dupcall="f"
if [ $# -eq 0 ]; then #if no arguments are passed in
	dir=`pwd`    
        cd $dir
        file=`ls -a`
	given="t"
	duplicate
	given="f"
	for i in $file
        do
		if [[ $i =~ ^\.$  ]] || [[ $i =~ ^\.\.$ ]]; then
			continue;
		fi
		temp2=`echo $dir"/"$i`
		checker=` echo $temp2 | tr [A-Z] [a-z]`
		foundmatch="f"
                for value in $match
                do
                if [[ $checker == $dir"/"$value ]]; then
                foundmatch="t"
                break
                fi
                done
        	if [ $foundmatch == "f" ]; then
    	            checkrest "$i"
                fi
         done
 
elif [ $# -eq 1 ]; then	#if one arg passed in
	if [ -d "$1" ]; then
		temp=$1		
		valid="f"
		given="t"
		properSyntax $temp
		if [ $valid == "t" ] ; then	
			dir=$1 
			cd $dir
			file=`ls -a`
			given="t"
			duplicate
			for i in $file
			do
				if [[ $i =~ ^\.$  ]] || [[ $i =~ ^\.\.$ ]]; then
        				continue;
				fi
				temp2=`echo $dir"/"$i`
				checker=` echo $temp2 | tr [A-Z] [a-z]`
				foundmatch="f"
				for value in $match
				do
				if [[ $checker == $dir"/"$value ]]; then
					foundmatch="t"
					break	
				fi
				done
				if [ $foundmatch == "f" ]; then 
					checkrest "$i"
				fi
			done
		else
			error "invalid input"
			exit 126 
		fi
	else
		error "invalid input" 
		exit 126
	fi		 
else
	error "invalid input"
	exit 126 	 
fi
}
duplicate()
{
dupcall="t"
match=""
matchtwo=""
        dirPath=$dir"/"$1
#        if [ ${dir:0:1} == "." ]; then
 #               dirPath="."
  #      fi
        result=`ls -1 $dirPath | tr [A-Z] [a-z] | sort | uniq -c|
	 grep -v " 1 " | sed "s/^ *//g" | sed 's/^[0-9]* //'`
        if [ ${#result} -ne 0 ]; then
                for value in $result; do
                final=`echo $dirPath | sed 's/\/$//'`
                echo $final"/"$value
	        dupcall="f"
                done
                if [[ $given == "t" ]]; then
                        match=$result
                        given="f"
                        return
                else
                        matchtwo=$result
                return
                fi
        fi
match=""
dupcall="f"
}
duplicateRec()
{
local new=""
for (( i=0; i<${#1}; i++ )); do
  if [ ${1:$i:1} != "/" ]; then
        new=$new${1:$i:1}
  else
        new=""
  fi
done

local result=`find -maxdepth 1 -iname $new |wc` 
for i in $result
do
properSyntax $i
if [ $valid == "t" ]; then 
	echo $i
fi
done
}
checkrest()
{
given="f"
if [ -f "$1" ] || [ -L "$1" ]; then
	properSyntax $1
	exceptions $1
	checker2=`echo $dir"/"$1 | tr [A-Z] [a-z]`
	for value in $matchtwo
        do
        foundmatch="f"
        if [[ $checker2 == $dir"/"$value ]]; then
        foundmatch="t"
        fi
        done
        if [ $valid == "f" ] && [ fileEx == "t" ]; then
	if [ $foundmatch == "f" ]; then
	echo $dir"/"$1
	fi
	fi
elif [ -d "$1" ]; then
	properSyntax $1
	readRights $1
	duplicate $1
	if [ $valid == "t" ]; then
		dupcall="f"
		for i in "$1"/*
		do	
		 checker2=`echo $dir"/"$i | tr [A-Z] [a-z]`
        	 for value in $matchtwo
                                do
                                foundmatch="f"
                                if [[ $checker2 == $dir"/"$value ]]; then
                                        foundmatch="t"
                                fi
				done
				if [[ $foundmatch == "f" ]]; then
                                        checkrest "$i"
                                fi

		done
	fi
fi
}
readRights()
{
if ! [[ -r $1 ]]; then   
	valid="f"  
	error "no read rights for $dir"/"$1"
        return
fi
}
properSyntax()
{
valid="f"
local new=""
for (( i=0; i<${#1}; i++ )); do
  if [ ${1:$i:1} != "/" ]; then
        new=$new${1:$i:1}
  else
        new=""
  fi
done
if [[ $new =~ [^A-Za-z_\.\-] ]]; then
	if [[ $given == "t" ]]; then
	echo $1
	given="f"
	elif [[ $dupcall == "f" ]]; then
	echo $dir"/"$1
	else
	valid="f"
	fi
	return
elif [[ ${#new} -gt 14 ]]; then
	if [[ $given == "t" ]]; then
        echo $1
        given="f"
	elif [[ $dupcall == "f" ]]; then
        echo $dir"/"$1
	else
	valid="f"
        fi
	return
elif [[ $new =~ ^- ]]; then
	if [[ $given == "t" ]]; then
        echo $1
        given="f"
	elif [[ $dupcall == "f" ]]; then
        echo $dir"/"$1
	else
	valid="f"
        fi
	return
elif [[ $new =~ ^\.$ ]] || [[ $new =~ ^\.\.$ ]]; then 
	valid="t"
	return
elif [[ $new =~ ^\. ]]; then
	if [[ $given == "t" ]]; then
        echo $1
        given="f"
	elif [[ $dupcall == "f" ]]; then
        echo $dir"/"$1
	else
	valid="f"
        fi
	return
fi
valid="t"
}
exceptions()
{
fileEx="f"
if [[ $1 =~ [[A-Z][a-z]\.,-\s_\*] ]]; then
        fileEx="t"
elif [[ $1 =~ ^- ]]; then
        fileEx="t"
fi
}

input()	#this was originally used to parse the input, 
#but cases where given is /-bin/cs will not be given
{
local new=""
start=1
if [ ${temp:0:1} != "/" ]; then
	start=0
fi
for (( i=start; i<${#temp}; i++ )); do
  if [ ${temp:$i:1} != "/" ]; then
	new=$new${temp:$i:1}
#  elif [[ $new =~ ^[^-][^/]*$ ]]; then 
#probably code here that calls propersyntax for new
#	valid="t"
#	new=""		
#  else 
#	valid="f"
#	break
  else 
	echo $i
	dupcall="f"
	properSyntax $new
	continue
	if [ $valid == "t" ]; then
		echo $new
		new=""
	else
		break
	fi
  fi
done
}
error()
{
  awk " BEGIN { print \"$@\" > \"/dev/fd/2\" }"
}
check "$@"

